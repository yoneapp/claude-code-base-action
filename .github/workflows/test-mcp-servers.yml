name: Test MCP Servers

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test-mcp-integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: |
          bun install
          cd test/mcp-test
          bun install

      - name: Run Claude Code with MCP test
        uses: ./
        id: claude-test
        with:
          prompt: "List all available tools"
          use_oauth: "true"
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
        env:
          # Change to test directory so it finds .mcp.json
          CLAUDE_WORKING_DIR: ${{ github.workspace }}/test/mcp-test

      - name: Check MCP server output
        run: |
          echo "Checking Claude output for MCP servers..."

          # Parse the JSON output
          OUTPUT_FILE="/tmp/claude-execution-output.json"

          if [ ! -f "$OUTPUT_FILE" ]; then
            echo "Error: Output file not found!"
            exit 1
          fi

          echo "Output file contents:"
          cat $OUTPUT_FILE

          # Check if mcp_servers field exists in the init event
          if jq -e '.[] | select(.type == "system" and .subtype == "init") | .mcp_servers' "$OUTPUT_FILE" > /dev/null; then
            echo "✓ Found mcp_servers in output"
            
            # Check if test-server is connected
            if jq -e '.[] | select(.type == "system" and .subtype == "init") | .mcp_servers[] | select(.name == "test-server" and .status == "connected")' "$OUTPUT_FILE" > /dev/null; then
              echo "✓ test-server is connected"
            else
              echo "✗ test-server not found or not connected"
              jq '.[] | select(.type == "system" and .subtype == "init") | .mcp_servers' "$OUTPUT_FILE"
              exit 1
            fi
            
            # Check if mcp tools are available
            if jq -e '.[] | select(.type == "system" and .subtype == "init") | .tools[] | select(. == "mcp__test-server__test_tool")' "$OUTPUT_FILE" > /dev/null; then
              echo "✓ MCP test tool found"
            else
              echo "✗ MCP test tool not found"
              jq '.[] | select(.type == "system" and .subtype == "init") | .tools' "$OUTPUT_FILE"
              exit 1
            fi
          else
            echo "✗ No mcp_servers field found in init event"
            jq '.[] | select(.type == "system" and .subtype == "init")' "$OUTPUT_FILE"
            exit 1
          fi

          echo "✓ All MCP server checks passed!"
